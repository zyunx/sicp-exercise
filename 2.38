(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
	result
	(iter (op result (car rest))
	      (cdr rest))))
  (iter initial sequence))
;Value: fold-left

(define (fold-right op initial sequence)
  (accumulate op initial sequence))
;Value: fold-right


交换律
结合律
