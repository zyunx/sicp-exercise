(define (make-table same-key?)

  (define (assoc key records)
    (cond ((null? records) false)
	  ((same-key? key (caar records)) (car records))
	  (else (assoc key (cdr records)))))

  (define (make-node key val records)
    (list key val records))

  (define (key-node node) (car node))

  (define (val-node node) (cadr node))

  (define (records-node node) (caddr node))

  (define (set-key-node! key node)
    (set-car! node key))

  (define (set-val-node! val node)
    (set-car! (cdr node) val))

  (define (set-records-node! records node)
    (set-car! (cddr node) records))

  (let ((local-table (make-node '*table* false '())))

    (define (lookup-internal keys current-table)
      (if (null? keys)
	  (val-node current-table)
	  (let ((subtable (assoc (car keys) (records-node current-table))))
	    (if subtable
		(lookup-internal (cdr keys) subtable)
		false))))

    (define (lookup keys) (lookup-internal keys local-table))


    (define (insert-internal! keys value current-table)
      (if (null? keys)
	  (set-val-node! value current-table)
	  (let ((subtable (assoc (car keys) (records-node current-table))))
	    (if (not subtable)
		(begin (set! subtable
			     (make-node (car keys)
					false
					'()))
		       (set-records-node! (cons subtable
					       (records-node current-table))
					 current-table)))
	    (insert-internal! (cdr keys) value subtable)))
      'ok)

    (define (insert! keys value)
      (insert-internal! keys value local-table))
	
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
	    ((eq? m 'insert-proc) insert!)
	    (else (error "Unknown operation - TABLE" m))))

    dispatch))
;Value: make-table

(define (same-key? test-key record-key)
  (if (number? record-key)
      (< (abs (- test-key record-key)) 3)
      (equal? test-key record-key)))
;Value: same-key?

(define t (make-table same-key?))
;Value: t

((t 'lookup-proc) '(3 10))
;Value: aaa
((t 'lookup-proc) '(1 3 3))
;Value: 123


((t 'insert-proc) '(3) 'a)
;Value: ok

((t 'insert-proc) '(1 2 3) 123)
;Value: ok
((t 'insert-proc) '(3 10) 'AAA)
;Value: ok

