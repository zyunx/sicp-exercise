(define (accumulate op initial seq)
  (if (null? seq)
      initial
      (op (car seq)
	  (accumulate op initial (cdr seq)))))
;Value: accumulate

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      (car seqs)
      (cons (accumulate op init
			(map (lambda (s) (car s)) seqs))
	    (accumulate-n op init
			(map (lambda (s) (cdr s)) seqs)))))
;Value: accumulate-n


(accumulate-n + 0 (list (list 1 2) (list 3 4) (list 5 6)))
;Value 16: (9 12)
