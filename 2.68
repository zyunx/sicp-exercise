(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
;Value: make-leaf

(define (leaf? object)
  (eq? (car object) 'leaf))
;Value: leaf?

(define (symbol-leaf x) (cadr x))
;Value: symbol-leaf

(define (weight-leaf x) (caddr x))
;Value: weight-leaf

(define (make-code-tree left right)
  (list left
	right
	(append (symbols left) (symbols right))
	(+ (weight left) (weight right))))
;Value: make-code-tree

(define (left-branch tree) (car tree))
;Value: left-branch

(define (right-branch tree) (cadr tree))
;Value: right-branch

(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
;Value: symbols

(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))
;Value: weight

(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
	'()
	(let ((next-branch
	       (choose-branch (car bits) current-branch)))
	  (if (leaf? next-branch)
	      (cons (symbol-leaf next-branch)
		    (decode-1 (cdr bits) tree))
	      (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))
;Value: decode

(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
	((= bit 1) (right-branch branch))
	(else (eroor "bad bit -- CHOOSE-BRANCH" bit))))
;Value: choose-branch

(define (adjoin-set x set)
  (cond ((null? set) (list x))
	((< (weight x) (weight (car set))) (cons x set))
	(else (cons (car set)
		    (adjoin-set x (cdr set))))))
;Value: adjoin-set

(define (make-leaf-set pairs)
  (if (null? pair)
      '()
      (let ((pair (car pairs)))
	(adjoin-set (make-leaf (car pair)
			       (cadr pair))
		    (make-leaf-set (cdr pairs))))))
;Value: make-leaf-set

(define sample-tree
  (make-code-tree (make-leaf 'A 4)
		  (make-code-tree
		   (make-leaf 'B 2)
		   (make-code-tree (make-leaf 'D 1)
				   (make-leaf 'C 1)))))
;Value: sample-tree

(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
	      (encode (cdr message) tree))))
;Value: encode

(define (in-symbols a symbol-set)
  (cond ((null? symbol-set) false)
	((eq? a (car symbol-set)) true)
	(else (in-symbols a (cdr symbol-set)))))
;Value: in-symbols

(define (encode-symbol a tree)
  (cond ((leaf? tree)
	 '())
	((in-symbols a (symbols (left-branch tree)))
	 (cons 0 (encode-symbol a (left-branch tree))))
	((in-symbols a (symbols (right-branch tree)))
	 (cons 1 (encode-symbol a (right-branch tree))))
	(else (error "not in symbols of tree -- ENCODE-SYMBO" a))))
;Value: encode-symbol
      
(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
;Value: sample-message

(encode (decode sample-message sample-tree) sample-tree)
;Value 15: (0 1 1 0 0 1 0 1 0 1 1 1 0)
;Value 14: (a d a b b c a)
