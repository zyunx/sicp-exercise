(define (make-segment s e)
  (cons s e))
;Value: make-segment

(define (start-segment seg)
  (car seg))
;Value: start-segment

(define (end-segment seg)
  (cdr seg))
;Value: end-segment

(define (make-point x y)
  (cons x y))
;Value: make-point

(define (x-point p)
  (car p))
;Value: x-point

(define (y-point p)
  (cdr p))
;Value: y-point

(define (midpoint-segment seg)
  (let ((start (start-segment seg))
	(end (end-segment seg)))
    (make-point (average (x-point start)
			 (x-point end))
		(average (y-point start)
			 (y-point end)))))
;Value: midpoint-segment

(define (average a b)
  (/ (+ a b) 2))
;Value: average


(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))
;Value: print-point

(define (area-rectangle r)
  (* (width-rectangle r)
     (height-rectangle r)))
;Value: area-rectangle

(define (perimeter-rectangle r)
  (* 2
     (+ (width-rectangle r)
	(height-rectangle r))))
;Value: perimeter-rectangle

; representation 1
(define (make-rectangle p1 p2)
  (cons p1 p2))
;Value: make-rectangle

(define (width-rectangle r)
  (abs (- (x-point (car r))
	  (x-point (cdr r)))))
;Value: width-rectangle

(define (height-rectangle r)
  (abs (- (y-point (car r))
	  (y-point (cdr r)))))
;Value: height-rectangle

(define rect (make-rectangle (make-point 2 3)
			     (make-point 10 6)))
;Value: rect

; representation 2
(define (make-rectangle w h)
  (cons w h))
;Value: make-rectangle

(define (width-rectangle r)
  (car r))
;Value: width-rectangle

(define (height-rectangle r)
  (cdr r))
;Value: height-rectangle

(define rect (make-rectangle 8 3))
;Value: rect

(area-rectangle rect)

(perimeter-rectangle rect)
