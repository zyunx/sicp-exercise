(define (square-tree tree)
  (cond ((null? tree) tree)
	((not (pair? tree)) (* tree tree))
	(else (cons (square-tree (car tree))
		    (square-tree (cdr tree))))))
;Value: square-tree

(define (square-tree tree)
  (map (lambda (subtree)
	 (if (pair? subtree)
	     (square-tree subtree)
	     (* subtree subtree)))
       tree))
;Value: square-tree


(square-tree
 (list 1
       (list 2 (list 3 4) 5)
       (list 6 7)))
;Value 16: (1 (4 (9 16) 25) (36 49))

