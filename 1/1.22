(define (smallest-divisor n)
  (find-divisor n 2))
;Value: smallest-divisor


(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
	((divides? test-divisor n) test-divisor)
	(else (find-divisor n (+ test-divisor 1)))))
;Value: find-divisor


(define (divides? a b)
  (= (remainder b a) 0))
;Value: divides?

(define (prime? n)
  (= (smallest-divisor n) n))
;Value: prime?

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
;Value: timed-prime-test

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))

;Value: start-prime-test

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
;Value: report-prime

(define (find-prime n  count)
  (cond ((> count 0)
	 (timed-prime-test n)
	 (if (prime? n)
	     (find-prime (+ n 1) (- count 1))
	     (find-prime (+ n 1) count)))))
;Value: find-prime


