(define (ordered-triples-sum n s)
  (filter (lambda (p) (= s (+ (car p) (cadr p) (caddr p))))
	  (filter (lambda (t) (not (same-any t)))
		  (ordered-triples n))))

(define (ordered-triples n)
  (flatmap (lambda (p)
	     (map (lambda (i) (cons i p))
		  (enumerate-interval 1 n)))
	   (flatmap (lambda (p)
		      (map (lambda (i) (list i p))
			   (enumerate-interval 1 n)))
		    (enumerate-interval 1 n))))

(define (same-any t)
  (or (= (car t) (cadr t))
      (= (car t) (caddr t))
      (= (cadr t) (caddr t))))

(ordered-triples-sum 4 6)
;Value 27: ((3 2 1) (2 3 1) (3 1 2) (1 3 2) (2 1 3) (1 2 3))


;The procedure #[compiled-procedure 26 ("srfi-1" #x1e) #x1a #x109ea620a] has been called with 3 arguments; it requires exactly 2 arguments.
;To continue, call RESTART with an option number:
; (RESTART 15) => Return to read-eval-print level 15.
; (RESTART 14) => Return to read-eval-print level 14.
; (RESTART 13) => Return to read-eval-print level 13.
; (RESTART 12) => Return to read-eval-print level 12.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n




;Value 25: ((4 1 1) (3 2 1) (2 3 1) (1 4 1) (3 1 2) (2 2 2) (1 3 2) (2 1 3) (1 2 3) (1 1 4))
;Value 24: ((3 2 1) (2 3 1) (3 1 2) (2 2 2) (1 3 2) (2 1 3) (1 2 3))


;Value 23: ((1 2 3) (2 1 3))


;The object 6 is not applicable.
;To continue, call RESTART with an option number:
; (RESTART 15) => Specify a procedure to use in its place.
; (RESTART 14) => Return to read-eval-print level 14.
; (RESTART 13) => Return to read-eval-print level 13.
; (RESTART 12) => Return to read-eval-print level 12.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n


;The object 2, passed as an argument to safe-car, is not a pair.
;To continue, call RESTART with an option number:
; (RESTART 13) => Return to read-eval-print level 13.
; (RESTART 12) => Return to read-eval-print level 12.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n


;Unbound variable: p
;To continue, call RESTART with an option number:
; (RESTART 14) => Specify a value to use instead of p.
; (RESTART 13) => Define p to a given value.
; (RESTART 12) => Return to read-eval-print level 12.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n


;Unbound variable: ordered-tripples
;To continue, call RESTART with an option number:
; (RESTART 13) => Specify a value to use instead of ordered-tripples.
; (RESTART 12) => Define ordered-tripples to a given value.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n





(define (enumerate-interval b e)
  (if (> b e)
      (list)
      (cons b (enumerate-interval (+ b 1) e))))

(define (flatmap proc seq)
  (accumulate append (list) (map proc seq)))

(define (accumulate op initial seq)
  (if (null? seq)
      initial
      (op (car seq) (accumulate op initial (cdr seq)))))

(define (unique-pairs n)
  (flatmap (lambda (i)
	     (map (lambda (j) (list j i))
		  (enumerate-interval 1 (- i 1))))
	   (enumerate-interval 1 n)))

(define (prime? n)
  (define (divides? d)
    (= 0 (remainder n d)))
  (define (prime-test i)
    (cond ((> (square i) n) true)
	  ((divides? i) false)
	  (else (prime-test (+ i 1)))))
  (prime-test 2))

(define (prime-sum? p)
  (prime? (+ (car p) (cadr p))))

(define (prime-sum-pairs n)
  (map (lambda (p)
	 (let ((j (car p))
	       (i (cadr p)))
	   (list j i (+ j i))))
       (filter prime-sum? (unique-pairs n))))

(prime-sum-pairs 5)
;Value 22: ((1 2 3) (2 3 5) (1 4 5) (3 4 7) (2 5 7))


;The object #[arity-dispatched-procedure 21], passed as the first argument to integer-add, is not the correct type.
;To continue, call RESTART with an option number:
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n


;The procedure #[compound-procedure 20] has been called with 1 argument; it requires exactly 2 arguments.
;To continue, call RESTART with an option number:
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n



;Unbound variable: prime?
;To continue, call RESTART with an option number:
; (RESTART 9) => Specify a value to use instead of prime?.
; (RESTART 8) => Define prime? to a given value.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n


;The object 1, passed as an argument to safe-cdr, is not a pair.
;To continue, call RESTART with an option number:
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n




(unique-pairs 5)
;Value 18: ((1 2) (1 3) (2 3) (1 4) (2 4) (3 4) (1 5) (2 5) (3 5) (4 5))


;Value 17: ((1 2) (1 3) (2 3) (1 4) (2 4) (3 4) (1 5) (2 5) (3 5) (4 5) (1 6) (2 6) (3 6) (4 6) (5 6) (1 7) (2 7) (3 7) (4 7) (5 7) (6 7) (1 8) (2 8) (3 8) (4 8) (5 8) (6 8) (7 8) (1 9) (2 9) (3 9) (4 9) (5 9) (6 9) (7 9) (8 9) (1 10) (2 10) (3 10) (4 10) (5 10) (6 10) (7 10) (8 10) (9 10))


;Value 16: ((1 2) (1 3) (2 3))


;Unbound variable: accumulate
;To continue, call RESTART with an option number:
; (RESTART 7) => Specify a value to use instead of accumulate.
; (RESTART 6) => Define accumulate to a given value.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n


;Unbound variable: j
;To continue, call RESTART with an option number:
; (RESTART 6) => Specify a value to use instead of j.
; (RESTART 5) => Define j to a given value.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n


;Unbound variable: flatmap
;To continue, call RESTART with an option number:
; (RESTART 5) => Specify a value to use instead of flatmap.
; (RESTART 4) => Define flatmap to a given value.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n



;Unbound variable: enumerate-intval
;To continue, call RESTART with an option number:
; (RESTART 4) => Specify a value to use instead of enumerate-intval.
; (RESTART 3) => Define enumerate-intval to a given value.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-printe
;Start debugger? (y or n): r
;Start debugger? (y or n): n


;Unbound variable: unique-piar
;To continue, call RESTART with an option number:
; (RESTART 3) => Specify a value to use instead of unique-piar.
; (RESTART 2) => Define unique-piar to a given value.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n




Copyright (C) 2014 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Saturday May 17, 2014 at 2:39:25 AM
  Release 9.2 || Microcode 15.3 || Runtime 15.7 || SF 4.41 || LIAR/x86-64 4.118
  Edwin 3.116
;You are in an interaction window of the Edwin editor.
;Type `C-h' for help, or `C-h t' for a tutorial.
;`C-h m' will describe some commands.
;`C-h' means: hold down the Ctrl key and type `h'.
;Package: (user)

