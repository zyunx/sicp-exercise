(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
	  (accumulate op initial (cdr sequence)))))


(define (map p sequence)
  (accumulate (lambda (x y)
		(cons (p x) y))
	      (list)
	      sequence))
;Value: map

(define (count-leaves t)
  (accumulate (lambda (x rest) (+ x rest))
	      0
	      (map (lambda (subtree)
		     (if (pair? subtree)
			 (count-leaves subtree)
			 1))
		   t)))


