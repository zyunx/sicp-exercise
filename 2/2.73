(define (deriv exp var)
  (cond ((number? exp) 0)
	((variable? exp) (if (same-variable? exp var) 1 0))
	(else ((get 'deriv (operator exp)) (operands exp)
					   var))))

(define (operator exp) (car exp))
(define (operands exp) (cdr exp))

(define (variable? exp) (symbol? exp))

(define (same-variable? exp var) (eq? exp var))


(define (install-sum-deriv)
  (define (deriv-sum operands var)
    (make-sum
     (deriv (car operands) var)
     (deriv (cadr operands) var)))
  (put 'deriv '+ deriv-sum))


(define (install-product-deriv)
  (define (deriv-product operands var)
    (make-sum
     (make-product (car operands) (deriv (cadr operands)))
     (make-product (deriv (car operands)) (cadr operands))))
  (put 'deriv '* deriv-product))

;Value: install-sum-deriv

(install-sum-deriv)


