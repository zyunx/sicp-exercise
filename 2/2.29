(define (make-mobile left right)
  (list left right))
;Value: make-mobile

(define (make-branch length structure)
  (list length structure))
;Value: make-branch

(define (left-branch mobile)
  (car mobile))
;Value: left-branch

(define (right-branch mobile)
  (cadr mobile))
;Value: right-branch

(define (branch-length branch)
  (car branch))
;Value: branch-length

(define (branch-structure branch)
  (cadr branch))
;Value: branch-structure

(define (is-mobile? mobile)
  (pair? mobile))
;Value: is-mobile?


(define (total-weight-branch branch)
  (let ((s (branch-structure branch)))
    (if (is-mobile? s)
	(total-weight-mobile s)
	s)))
;Value: total-weight-branch

(define (total-weight-mobile mobile)
  (+ (total-weight-branch (left-branch mobile))
     (total-weight-branch (right-branch mobile))))
;Value: total-weight-mobile

(define (total-weight mobile)
  (total-weight-mobile mobile))
;Value: total-weight

(total-weight (make-mobile (make-branch 1 1)
			   (make-branch 2 (make-mobile (make-branch 1 2)
						       (make-branch 1 3)))))
;Value: 6


;Value: 6

(define (make-mobile left right)
  (cons left right))
;Value: make-mobile

(define (make-branch length structure)
  (cons length structure))
;Value: make-branch

(define (right-branch mobile)
  (cdr mobile))
;Value: right-branch

(define (branch-structure branch)
  (cdr branch))
;Value: branch-structure

(define (balanced? mobile)
  (let ((lb (left-branch mobile))
	(rb (right-branch mobile)))
    (and (= (* (branch-length lb)
	       (total-weight-branch lb))
	    (* (branch-length rb)
	       (total-weight-branch rb)))
	 (if (is-mobile? (branch-structure lb))
	     (balanced? (branch-structure lb))
	     true)
	 (if (is-mobile? (branch-structure rb))
	     (balanced? (branch-structured rb))
	     true))))
;Value: balanced?

(balanced? (make-mobile (make-branch 1 
				     (make-mobile (make-branch 2 1)
						  (make-branch 1 2))) 
			(make-branch 3 1)))
;Value: #t


