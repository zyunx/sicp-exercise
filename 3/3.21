(define (make-queue) (cons '() '()))
;Value: make-queue

(define (front-ptr queue) (car queue))
;Value: front-ptr

(define (rear-ptr queue) (cdr queue))
;Value: rear-ptr

(define (set-front-ptr! queue item) (set-car! queue item))
;Value: set-front-ptr!

(define (set-rear-ptr! queue item) (set-cdr! queue item))
;Value: set-rear-ptr!

(define (empty-queue? queue)
  (null? (font-ptr queue)))
;Value: empty-queue?

(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (font-ptr queue))))
;Value: front-queue

(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
	   (set-front-ptr! queue new-pair)
	   (set-rear-ptr! queue new-pair))
	  (else
	   (set-cdr! (rear-ptr queue) new-pair)
	   (set-rear-ptr! queue new-pair)))
    queue))
;Value: insert-queue!

(define (delete-queue! queue)
  (if (empty-queue? queue)
      (error "DELETE! called with an empty queue" queue)
      (begin (set-front-ptr! queue (cdr (front-ptr queue)))
	     queue)))
;Value: delete-queue!

(define q1 (make-queue))
;Value: q1

(print-queue q1)
;Unspecified return value

(print-queue (insert-queue! q1 'a))
a

(print-queue (insert-queue! q1 'b))
a, b, b


(print-queue (delete-queue! q1))
b, b
;Unspecified return value

(print-queue (delete-queue! q1))
b

(define (print-queue queue)
  (if (not (empty-queue? queue)) 
      (let ((ptr (front-ptr queue)))

	(define (print-items ptr)
	  (if (not (null? ptr))
	      (begin (display ", ")
		     (display (car ptr))
		     (print-items (cdr ptr)))))

	(display (car ptr))
	(print-items (cdr ptr)))))
;Value: print-queue
	
      











Copyright (C) 2014 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Saturday May 17, 2014 at 2:39:25 AM
  Release 9.2 || Microcode 15.3 || Runtime 15.7 || SF 4.41 || LIAR/x86-64 4.118
  Edwin 3.116
;You are in an interaction window of the Edwin editor.
;Type `C-h' for help, or `C-h t' for a tutorial.
;`C-h m' will describe some commands.
;`C-h' means: hold down the Ctrl key and type `h'.
;Package: (user)

