(define (scale-stream c s)
  (stream-map (lambda (e) (* c e))
	      s))
;Value: scale-stream

(define (merge s1 s2)
  (cond ((stream-null? s1) s2)
	((stream-null? s2) s1)
	(else
	 (let ((s1car (stream-car s1))
	       (s2car (stream-car s2)))
	   (cond ((< s1car s2car)
		  (cons-stream s1car (merge (stream-cdr s1)
					    s2)))
		 ((> s1car s2car)
		  (cons-stream s2car (merge s1
					    (stream-cdr s2))))
		 (else
		  (cons-stream s1car (merge (stream-cdr s1)
					    (stream-cdr s2)))))))))
;Value: merge

(define S (cons-stream 1 (merge (scale-stream 2 S)
				(merge (scale-stream 3 S)
				       (scale-stream 5 S)))))
;Value: s

(stream-ref s 4)
;Value: 5
;Value: 4
;Value: 3
;Value: 2







