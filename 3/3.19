(define (last-pair x)
  (if (null? (cdr x))
      x
      (last-pair (cdr x))))
;Value: last-pair

(last-pair '(a b c))
;Value 14: (c)

(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)
;Value: make-cycle

(define (detect-cycle x)
  (define (pursue p1 p2)
    (cond ((or (null? p1)
	       (null? p2))
	   false)
	  ((eq? p1 p2)
	   true)
	  (else (pursue (one-step p1) (two-step p2)))))
  
  (define (one-step p1)
    (if (null? p1)
	p1
	(cdr p1)))

  (define (two-step p2)
    (one-step (one-step p2)))

  (pursue (one-step x) (two-step x)))
;Value: detect-cycle

(detect-cycle '(a b c))
;Value: #f

(detect-cycle (make-cycle '(a b c)))
;Value: #t

(define t '(t))
;Value: t

(set-cdr! t (make-cycle '(a b c)))

(detect-cycle t)
;Value: #t


