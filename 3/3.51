(define the-empty-stream '())

(define (stream-map proc . argstreams)
  (if (stream-null? (car argstreams))
      the-empty-stream
      (cons-stream
       (apply proc (map stream-car argstreams))
       (apply stream-map
	      (cons proc (map stream-cdr argstreams))))))
;Value: stream-map

(define (show x)
  (display-line x)
  x)
;Value: show

(define (display-line x)
  (newline)
  (display x))
;Value: display-line

(define (stream-enumerate-interval a b)
  (define (enum n)
    (if (> n b)
	the-empty-stream
	(cons-stream n (stream-enumerate-interval (+ n 1) b))))
  (enum a))
;Value: stream-enumerate-interval


(define x (stream-map show (stream-enumerate-interval 0 10)))

0
;Value: x

(stream-ref x 5)

1
2
3
4
5
;Value: 5

(stream-ref x 7)

6
7
;Value: 7

(stream-ref x 2)
;Value: 2


(show 1)
