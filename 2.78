(define (make-table same-key?)
  (define (assoc key records)
    (cond ((null? records) false)
	  ((same-key? key (caar records)) (car records))
	  (else (assoc key (cdr records)))))
  (define (make-node key val records)
    (list key val records))
  (define (key-node node) (car node))
  (define (val-node node) (cadr node))
  (define (records-node node) (caddr node))
  (define (set-key-node! key node)
    (set-car! node key))
  (define (set-val-node! val node)
    (set-car! (cdr node) val))
  (define (set-records-node! records node)
    (set-car! (cddr node) records))
  (let ((local-table (make-node '*table* false '())))
    (define (lookup-internal keys current-table)
      (if (null? keys)
	  (val-node current-table)
	  (let ((subtable (assoc (car keys) (records-node current-table))))
	    (if subtable
		(lookup-internal (cdr keys) subtable)
		false))))
    (define (lookup keys) (lookup-internal keys local-table))
    (define (insert-internal! keys value current-table)
      (if (null? keys)
	  (set-val-node! value current-table)
	  (let ((subtable (assoc (car keys) (records-node current-table))))
	    (if (not subtable)
		(begin (set! subtable
			     (make-node (car keys)
					false
					'()))
		       (set-records-node! (cons subtable
					       (records-node current-table))
					 current-table)))
	    (insert-internal! (cdr keys) value subtable)))
      'ok)
    (define (insert! keys value)
      (insert-internal! keys value local-table))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
	    ((eq? m 'insert-proc) insert!)
	    (else (error "Unknown operation - TABLE" m))))
    dispatch))
;Value: make-table

(define (same-key? k dk)
  (if (and (pair? k) (pair? dk))
      (and (same-key? (car k) (car dk)) (same-key? (cdr k) (cdr dk)))
      (eq? k dk)))
;Value: same-key?

(define operation-table (make-table same-key?))
;Value: operation-table

(define get (operation-table 'lookup-proc))
;Value: get

(define put (operation-table 'insert-proc))
;Value: put

; generic operations
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get (list op type-tags))))
      (if proc
	  (apply proc (map contents args))
	  (error
	   "No method for these types -- APPLY-GENERIC"
	   (list op type-tags))))))
;Value: apply-generic

; type tags
(define (attach-tag type-tag contents)
  (cond ((eq? type-tag 'scheme-number)
	 contents)
	(else
	 (cons type-tag contents))))
;Value: attach-tag

(define (type-tag datum)
  (cond ((pair? datum)
	 (car datum))
	((number? datum)
	 'scheme-number)
	(else
	 (error "Bad tagged datum -- TYPE-TAG" datum))))
;Value: type-tag

(define (contents datum)
  (cond ((pair? datum)
	 (cdr datum))
	((number? datum)
	 datum)
	(else
	 (error "Bad tagged data -- CONTENTS" datum))))
;Value: contents

(define (add x y) (apply-generic 'add x y))
;Value: add

(define (sub x y) (apply-generic 'sub x y))
;Value: sub

(define (mul x y) (apply-generic 'mul x y))
;Value: mul

(define (div x y) (apply-generic 'div x y))

(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (put '(add (scheme-number scheme-number))
       (lambda (x y) (tag (+ x y))))
  (put '(sub (scheme-number scheme-number))
       (lambda (x y) (tag (- x y))))
  (put '(mul (scheme-number scheme-number))
       (lambda (x y) (tag (* x y))))
  (put '(div (scheme-number scheme-number))
       (lambda (x y) (tag (/ x y))))
  (put '(make scheme-number)
       (lambda (x) (tag x)))
  'done)
;Value: install-scheme-number-package

(define (make-scheme-number n)
  ((get '(make scheme-number)) n))
;Value: make-scheme-number

(define (install-rational-package)
  ;; internal procedures
   (define (numer x) (car x))
   (define (denom x) (cdr x))
   (define (make-rat n d)
     (let ((g (gcd n d)))
       (cons (/ n g) (/ d g))))
   (define (add-rat x y)
     (make-rat (+ (* (numer x) (denom y))
		  (* (numer x) (denom x)))
	       (* (denom x) (denom y))))
   (define (sub-rat x y)
     (make-rat (- (* (numer x) (denom y))
		  (* (numer y) (denom x)))
	       (* (denom x) (denom y))))
   (define (mul-rat x y)
     (make-rat (* (numer x) (numer y))
	       (* (denom x) (denom y))))
   (define (div-rat x y)
     (make-rat (* (numer x) (denom y))
	       (* (denom x) (numer y))))

   ;; interface to rest of the system
   (define (tag x) (attach-tag 'rational x))
   (put '(add (rational rational))
	(lambda (x y) (tag (add-rat x y))))
   (put '(sub (rational rational))
	(lambda (x y) (tag (sub-rat x y))))
   (put '(div (rational rational))
	(lambda (x y) (tag (div-rat x y))))
   (put '(mul (rational rational))
	(lambda (x y) (tag (mul-rat x y))))
   (put '(make rational)
	(lambda (n d) (tag (make-rat n d))))
   'done)
;Value: install-rational-package

(define (make-rational n d)
  ((get '(make rational)) n d))
;Value: make-rational


  ;;
  (define (real-part z) (apply-generic 'real-part z))
;Value: real-part
  (define (imag-part z) (apply-generic 'imag-part z))
;Value: imag-part
  (define (magnitude z) (apply-generic 'magnitude z))
;Value: magnitude
  (define (angle z) (apply-generic 'angle z))
;Value: angle

  ; rectanglar representation
  (define (install-rectangular-package)
    ;; internal procedures
    (define (make-from-mag-ang r a)
      (cons (* r (cos a))
	    (* r (sin a))))
    (define (make-from-real-imag x y)
      (cons x y))
    (define (real-part z) (car z))
    (define (imag-part z) (cdr z))
    (define (magnitude z)
      (sqrt (+ (square (real-part z))
	       (square (imag-part z)))))
    (define (angle z)
      (atan (imag-part z) (real-part z)))
    ;; interface to the rest of system
    (define (tag x) (attach-tag 'rectangular x))
    (put '(real-part (rectangular)) real-part)
    (put '(imag-part (rectangular)) imag-part)
    (put '(magnitude (rectangular)) magnitude)
    (put '(angle (rectangular)) angle)
    (put '(make-from-real-imag rectangular)
	 (lambda (x y) (tag (make-from-real-imag x y))))
    (put '(make-from-mag-ang rectangular)
	 (lambda (r a) (tag (make-from-mag-ang r a))))
    'done)
;Value: install-rectangular-package

  ;; magnitude angle representation
  (define (install-polar-package)
    ;; internal procedures
    (define (make-from-real-imag x y)
      (cons (sqrt (+ (square x) (square y)))
	    (atan y x)))
    (define (make-from-mag-ang r a) (cons r a))
    (define (real-part z)
      (* (magnitude z) (cos (angle z))))
    (define (imag-part z)
      (* (magnitude z) (sin (angle z))))
    (define (magnitude x) (car x))
    (define (angle x) (cdr x))

    ;; interface to the rest of the system
    (define (tag x) (attach-tag 'polar x))
    (put '(real-part (polar)) real-part)
    (put '(imag-part (polar)) imag-part)
    (put '(magnitude (polar)) magnitude)
    (put '(angle (polar)) angle)
    (put '(make-from-real-imag polar)
	 (lambda (x y) (tag (make-from-real-imag x y))))
    (put '(make-from-mag-ang polar)
	 (lambda (r a) (tag (make-from-mag-ang r a))))
    'done)
;Value: install-polar-package

  (install-rectangular-package)
;Value: done
  (install-polar-package)
;Value: done

(define (install-complex-package)

  (define (make-from-real-imag x y)
    ((get '(make-from-real-imag rectangular)) x y))
  (define (make-from-mag-ang r a)
    ((get '(make-from-mag-ang polar)) r a))
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
			 (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
			 (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
		       (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
		       (- (angle z1) (angle z2))))

  ;; interface to rest of system
  (define (tag z) (attach-tag 'complex z))
  (put '(real-part (complex)) real-part)
  (put '(imag-part (complex)) imag-part)
  (put '(magnitude (complex)) magnitude)
  (put '(angle (complex)) angle)
  (put '(add (complex complex))
       (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put '(sub (complex complex))
       (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put '(mul (complex complex))
       (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put '(div (complex complex))
       (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put '(make-from-real-imag complex)
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put '(make-from-mag-ang complex)
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)
;Value: install-complex-package

(install-complex-package)
;Value: done

(add 1 2)
;Value: 3

(magnitude (div (make-complex-from-real-imag 1 2) (make-complex-from-real-imag 3 4)))
;Value: .447213595499958















